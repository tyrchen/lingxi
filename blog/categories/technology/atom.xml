<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technology | 觅珠人]]></title>
  <link href="http://tyrchen.github.com/lingxi/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://tyrchen.github.com/lingxi/"/>
  <updated>2012-12-24T09:24:27+08:00</updated>
  <id>http://tyrchen.github.com/lingxi/</id>
  <author>
    <name><![CDATA[Tyr Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[进一步思考Atanasoff (Octopress client)]]></title>
    <link href="http://tyrchen.github.com/lingxi/blog/2012/12/19/atanasoff-product-flow-chart/"/>
    <updated>2012-12-19T21:57:00+08:00</updated>
    <id>http://tyrchen.github.com/lingxi/blog/2012/12/19/atanasoff-product-flow-chart</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>Atanasoff基本的想法已经有了，接下来就是一些细节上的思考。晚上在家看小宝的同时，考虑了一下产品的主要流程。</p>

<!-- more -->


<h2>注册流程</h2>

<p>用户使用github接入后，Atanasoff需要为用户创建属于他的博客repo。</p>

<p><img src="/images/charts/atanasoff-registration.jpg"></p>

<h2>博客撰写和编辑流程</h2>

<p>博客在编辑状态时，会被置为lock状态，这是为了避免用户在不同设备之间同一时间段内编辑同一篇博文导致冲突。以后支持operational transformation后，不需要此状态。</p>

<p>博客撰写时，为避免浏览器或app崩溃，需要定期将修改保存在local storage中；并在一定时间内提交到服务器。如果客户端10分钟内没有任何改动，则提交所有更改并退出编辑状态（让其它客户端有机会进行编辑）。</p>

<p><img src="/images/charts/atanasoff-blog.jpg"></p>

<h2>小宝照片</h2>

<p><img src="/images/photos/baby20121219.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[产品随想：octopress客户端 —— Atanasoff]]></title>
    <link href="http://tyrchen.github.com/lingxi/blog/2012/12/18/octopress-client-a-better-composition-tool/"/>
    <updated>2012-12-18T08:26:00+08:00</updated>
    <id>http://tyrchen.github.com/lingxi/blog/2012/12/18/octopress-client-a-better-composition-tool</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>我是个懒人，记性还差。写了两篇博客后，隔了一天再写，就忘了新建博文的命令，是 <code>rake new_post</code> 还是 <code>rake new_posts</code> 来着？另外，每次写完之余，都要敲 <code>rake gen_deploy</code> 部署也总让我抓狂。平心而论，我还是非常喜欢octopress这个产品，简洁的设计，独特的思想，优雅的撰写方式和美妙的历史记录，这些都让我沉浸在其中，乐不思WP，但如果再能好那么一点点，再让我少干些重复性的劳动，一切就完美了。</p>

<p>同事见了我的博客也想搭一个，我说这不适合你，octopress只适合程序猿。回过头来我想，为什么自己的视界这么狭小？程序猿是干什么的？不就是把复杂繁重的工作交给计算机，让计算机前的人能够悠然自得么？</p>

<p>说<strong>不</strong>的程序猿不是好的产品经理。octopress已经为程序猿提供了一套 <code>rake</code> 的自动化工具。在这个基础之上，再提供一套简洁的工具让用户摆脱繁杂的设置和命令不就可以了么？是谁规定一定要搭建 <code>ruby</code> 环境才能搭建octopress博客？又是谁规定一定要会基本的 <code>git</code> 语法和 <code>shell</code> 命令才能使用octopress？</p>

<p>于是就有了接下来的思考：一个Octopress客户端。
为了行文方便，我暂且将这个产品称之为 <strong>Atanasoff</strong> [1]。我喜欢命名，因为我知道一旦一个产品有了名字，它就有了血肉，有了生命。</p>

<!-- more -->


<h2>Atanasoff</h2>

<p>Atanasoff可以让octopress的用户focus在博文的撰写，而把博客系统的搭建和维护这样tedious的任务交给Atanasoff去做。Atanasoff的用户需要有如下技能来正常使用：</p>

<ul>
<li>有基本的互联网经验，能注册和配置github.com</li>
<li>能够很快学会一种很轻量标记语言来撰写文章</li>
</ul>


<p>下面就来看看我假想中的Atanasoff如何解放用户的双手。</p>

<h3>用户注册和登录</h3>

<p>Atanasoff的用户须以github第三方登录，且创建了username.github.com.git，并将其授权给Atanasoff的github账号atanasoffr（将其添加为collaborator）。(补记：也许可以向用户要repo access的授权，这样可以直接帮用户创建repo和修改代码)</p>

<p>用户第一次注册后，服务端检查并帮用户设置为博客使用的repo，使用配置好的octopress替用户搭建博客。</p>

<h3>设置</h3>

<p>用户可以对自己的octopress博客进行简单的设置：</p>

<ul>
<li>博客基本信息</li>
<li>导航</li>
<li>插件如百度统计 / Google Analytics，duoshuo / disqus，微博秀等</li>
<li>个人域名</li>
</ul>


<h3>撰写</h3>

<p>客户端提供 <code>markdown</code> 编辑器 [2]，让用户可以轻松编辑博客。服务器和客户端保持同步，客户端的修改或者新文章的撰写都会在有网络的情况下定期同步到服务器，再由服务器push到github。</p>

<p>为方便起见，markdown编辑器提供wysiwyg功能，让用户能够随时预览撰写的内容。编辑器尽可能美丽一些，sublime text 2带的MarkdownEditor插件就是一个很好的参考对象。</p>

<p>另外，提供图片上传和文件上传功能，上传的文件按类型放在repo相应的目录下，客户端同时生成对应的markdown语句插入到文章中合适的位置，方便用户展示图片或提供下载链接。</p>

<h3>部署</h3>

<p>用户可以一键将写好的博文部署到github pages上。为性能计，部署的频率以5分钟为单位，不允许用户太频繁的部署。（因为 <code>rake gen_deploy</code> 是个相对较重的操作）。</p>

<h3>支持多种客户端</h3>

<p>Atanasoff能够支持多种客户端，并随时在这些客户端间保持同步。可以考虑先出一个对xpad [3] 友好的支持响应式设计的web版本，然后进一步用phonegap提供对xpad的支持。xphone的支持似乎意义不大，因为小屏幕似乎不太适合撰写。</p>

<h3>其他要素</h3>

<p>支持中英文的界面</p>

<h3>实现方案</h3>

<p>python / django对我而言是最佳的选择，但我会考虑尝试nodejs。</p>

<h3>背后的逻辑（随想，并不严谨）</h3>

<ul>
<li>服务端搭建合适的octopress生产环境，每个用户的repo都能正常运行 <code>rake</code> 命令。</li>
<li>当用户设置好后，clone他的repository，切换到source并检查是否有source/post，没有的话xfork [4] 出一个设置好的系统版本。</li>
<li>服务器使用socket.io推送post目录下的所有markdown文件（先考虑posts，以后考虑pages），及依据config生成的字典。</li>
<li><code>rake</code> 命令使用background task完成。</li>
<li>定期同步的文章内容可以记录在临时文件中并使用 diff / patch 的思想进行同步 [5]。由于这样的同步往往在自己的设备之间进行，不存在同时修改的情况，所以目前之版本无opertional transformation [6] 之必要。日后如有需要，可以添加 <a href="http://http://etherpad.org/">etherpad</a> 的支持。</li>
</ul>


<h3>产品用途</h3>

<ul>
<li>个人博客</li>
<li>企业博客</li>
</ul>


<h2>何时开工</h2>

<p>既然是随想，就注定它不一定能够问世。我也许会继续完善这篇文章，找到一个合适的时间去尝试做点什么。也许2013元旦假期是个不错的选择，前提是我家那混世小魔王能乖巧一些。</p>

<p>接下来我至少会做这些事情：</p>

<ul>
<li>继续完善对这个产品的思考</li>
<li>尝试用<strong>omniGraffle</strong>做个产品原型出来，做为我使用这个Mac下的visio的敲门砖</li>
<li>不断寻找合适的工具来加速产品的面世</li>
</ul>


<h2>Reference</h2>

<p>[1] 本博中假想的产品均冠以计算机科学家的名字，从A-Z依次排列。<a href="http://zh.wikipedia.org/wiki/%E7%BA%A6%E7%BF%B0%C2%B7%E6%96%87%E6%A3%AE%E7%89%B9%C2%B7%E9%98%BF%E5%A1%94%E7%BA%B3%E7%B4%A2%E5%A4%AB">Atanasoff</a> 是第一台自动电子数字计算机的发明者。</p>

<p>[2] JS的markdown wysiwyg编辑器有很多，比如说：<a href="http://oscargodson.github.com/EpicEditor/">EpicEditor</a>。另外，<a href="http://dillinger.io/">dillinger</a> 绝对是让Atanasoff惊喜的project。</p>

<p>[3] 考虑xpad主要是因为本文实际上是在搭地铁的一个多小时里用ipad上的evernote完成。</p>

<p>[4] xfork系作者创造出来的词，即clone一个atanasoffr下配置好的repo，然后将 .<code>git/config</code> 中的内容改为用户repo的配置，再 <code>push</code>。这样能最快速地搭建出来一个博客。</p>

<p>[5] 随便google了下，似乎有 <a href="https://github.com/benjamine/JsonDiffPatch">JsonDiffPatch</a> 可以尝试</p>

<p>[6] 协同工作软件的思想基石。 参见wikipedia下的介绍：<a href="http://en.wikipedia.org/wiki/Operational_transformation">operational transformation</a></p>

<h2>后续文章</h2>

<ul>
<li><a href="/blog/2012/12/19/atanasoff-product-flow-chart/">进一步思考Atanasoff (Octopress Client)</a></li>
</ul>


<h2>小宝的照片</h2>

<p>昨日小宝洗完澡，躺着就睡着了。</p>

<p><img src="/images/photos/baby20121217.jpg"></p>
]]></content>
  </entry>
  
</feed>
